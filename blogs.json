{"status":"ok","feed":{"url":"https://medium.com/feed/@hunnychawla28","title":"Stories by Hunny Chawla on Medium","link":"https://medium.com/@hunnychawla28?source=rss-4def4207e2a3------2","author":"","description":"Stories by Hunny Chawla on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/1*SaU8XED2iczD5iThelzZbQ.jpeg"},"items":[{"title":"How Protobuf is different from a normal json?","pubDate":"2023-07-11 09:18:56","link":"https://hunnychawla28.medium.com/how-protobuf-is-different-from-a-normal-json-54558ae028e1?source=rss-4def4207e2a3------2","guid":"https://medium.com/p/54558ae028e1","author":"Hunny Chawla","thumbnail":"","description":"\n<p>Protocol Buffers (protobuf) and JSON (JavaScript Object Notation) are both popular data interchange formats, but they have some fundamental differences. Here are a few key distinctions:</p>\n<p>1. <strong>Data Representation</strong>: JSON represents data as plain text using a human-readable format, whereas protobuf uses a binary format for efficient serialization and transmission. Protobuf messages are typically smaller in size compared to their JSON equivalents.</p>\n<p>2. <strong>Schema Definition</strong>: JSON does not have a formal schema definition. Data can be represented flexibly, and the structure may vary between different JSON instances. On the other hand, protobuf requires a defined schema using a\u00a0.proto file, which outlines the structure, data types, and field names of the messages. This schema provides stronger typing and helps enforce data consistency.</p>\n<p>3. <strong>Encoding and Decoding Overhead</strong>: JSON relies on text-based encoding and decoding, which can introduce overhead due to the parsing and string manipulation required. Protobuf, being a binary format, has lower encoding and decoding overhead, leading to faster serialization and deserialization.</p>\n<p>4. <strong>Language Support</strong>: JSON has native support in most programming languages, making it easy to work with. Protobuf, while also widely supported, requires the use of a code generator to create language-specific classes or structs for message handling. This code generation process allows for more efficient and type-safe interaction with protobuf messages.</p>\n<p>5. <strong>Extensibility</strong>: JSON allows easy addition of new fields or attributes to the data structure, even if they are not defined in the schema. Protobuf, however, encourages schema evolution through message versioning. New fields can be added, but they need to be properly defined in the schema to ensure compatibility.</p>\n<p>6. <strong>Language Agnosticism</strong>: JSON is primarily associated with JavaScript but is widely used across various programming languages. Protobuf, while initially developed by Google for internal use, supports multiple programming languages, allowing for interoperability between different systems.</p>\n<p>In summary, JSON provides simplicity and flexibility with its human-readable format, while protobuf offers efficiency, strong typing, and a defined schema for better performance and stricter data validation. The choice between the two depends on the specific requirements of your application, such as performance, interoperability, and data consistency.</p>\n<p>Read more about protobuf: <a href=\"https://protobuf.dev/\">https://protobuf.dev/</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=54558ae028e1\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>Protocol Buffers (protobuf) and JSON (JavaScript Object Notation) are both popular data interchange formats, but they have some fundamental differences. Here are a few key distinctions:</p>\n<p>1. <strong>Data Representation</strong>: JSON represents data as plain text using a human-readable format, whereas protobuf uses a binary format for efficient serialization and transmission. Protobuf messages are typically smaller in size compared to their JSON equivalents.</p>\n<p>2. <strong>Schema Definition</strong>: JSON does not have a formal schema definition. Data can be represented flexibly, and the structure may vary between different JSON instances. On the other hand, protobuf requires a defined schema using a\u00a0.proto file, which outlines the structure, data types, and field names of the messages. This schema provides stronger typing and helps enforce data consistency.</p>\n<p>3. <strong>Encoding and Decoding Overhead</strong>: JSON relies on text-based encoding and decoding, which can introduce overhead due to the parsing and string manipulation required. Protobuf, being a binary format, has lower encoding and decoding overhead, leading to faster serialization and deserialization.</p>\n<p>4. <strong>Language Support</strong>: JSON has native support in most programming languages, making it easy to work with. Protobuf, while also widely supported, requires the use of a code generator to create language-specific classes or structs for message handling. This code generation process allows for more efficient and type-safe interaction with protobuf messages.</p>\n<p>5. <strong>Extensibility</strong>: JSON allows easy addition of new fields or attributes to the data structure, even if they are not defined in the schema. Protobuf, however, encourages schema evolution through message versioning. New fields can be added, but they need to be properly defined in the schema to ensure compatibility.</p>\n<p>6. <strong>Language Agnosticism</strong>: JSON is primarily associated with JavaScript but is widely used across various programming languages. Protobuf, while initially developed by Google for internal use, supports multiple programming languages, allowing for interoperability between different systems.</p>\n<p>In summary, JSON provides simplicity and flexibility with its human-readable format, while protobuf offers efficiency, strong typing, and a defined schema for better performance and stricter data validation. The choice between the two depends on the specific requirements of your application, such as performance, interoperability, and data consistency.</p>\n<p>Read more about protobuf: <a href=\"https://protobuf.dev/\">https://protobuf.dev/</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=54558ae028e1\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["protobuf"]},{"title":"Diff between (a+b)/2 and a+(b-a)/2","pubDate":"2022-03-02 17:39:28","link":"https://hunnychawla28.medium.com/diff-between-a-b-2-and-a-b-a-2-92735907026b?source=rss-4def4207e2a3------2","guid":"https://medium.com/p/92735907026b","author":"Hunny Chawla","thumbnail":"","description":"\n<p>Hello People,<br>Do you know what is the difference between (a+b)/2 and a+(b-a)/2? <br>if not, then don\u2019t worry. Here I\u2019m with a good explanation. Mathematically it seems to be the\u00a0same.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/882/1*wTHFwqoBIEtw5XqTyWh4TQ.png\"></figure><p>But in programming, you might get weird results. Let\u2019s take an\u00a0example.</p>\n<pre>int a = 1000000000;<br>int b = 2000000000;<br>print((a+b)/2);<br>print(a+(b-a)/2);</pre>\n<pre>Output:<br>-647483648<br>1500000000</pre>\n<p>As we can see that (a+b)/2 is giving me -647483648 and a+(b-a)/2 is giving me 1500000000 i.e\u00a0correct.</p>\n<p><strong>Why is this happening?<br></strong>Since integers can store a maximum value of 2\u00b3\u00b9 -1 (2147483647) in java. After that, it will go to the negative side. If you will do a+b first it will cross the integer limit and it will give you a negative result. But if you will do b-a(will be smaller) first and divide it by 2 ( will get much smaller ) and then add\u00a0a.</p>\n<pre>int a = 2000000000;<br>int b = 1000000000;<br>print(a+b);<br>print((a+b)/2);<br>print(b-a);<br>print((b-a)/2);<br>print(a+(b-a)/2);</pre>\n<pre>Output:<br>-1294967296<br>-647483648<br>-1000000000<br>-500000000<br>1500000000</pre>\n<p><strong>Conclusion:<br></strong>We should always use <strong>a+(b-a)/2</strong> instead of\u00a0<strong>(a+b)/2.</strong></p>\n<p>If you like this article and found it interesting and knowledgeable, do hit the \ud83d\udc4f button and share it with your colleagues and\u00a0friends.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=92735907026b\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>Hello People,<br>Do you know what is the difference between (a+b)/2 and a+(b-a)/2? <br>if not, then don\u2019t worry. Here I\u2019m with a good explanation. Mathematically it seems to be the\u00a0same.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/882/1*wTHFwqoBIEtw5XqTyWh4TQ.png\"></figure><p>But in programming, you might get weird results. Let\u2019s take an\u00a0example.</p>\n<pre>int a = 1000000000;<br>int b = 2000000000;<br>print((a+b)/2);<br>print(a+(b-a)/2);</pre>\n<pre>Output:<br>-647483648<br>1500000000</pre>\n<p>As we can see that (a+b)/2 is giving me -647483648 and a+(b-a)/2 is giving me 1500000000 i.e\u00a0correct.</p>\n<p><strong>Why is this happening?<br></strong>Since integers can store a maximum value of 2\u00b3\u00b9 -1 (2147483647) in java. After that, it will go to the negative side. If you will do a+b first it will cross the integer limit and it will give you a negative result. But if you will do b-a(will be smaller) first and divide it by 2 ( will get much smaller ) and then add\u00a0a.</p>\n<pre>int a = 2000000000;<br>int b = 1000000000;<br>print(a+b);<br>print((a+b)/2);<br>print(b-a);<br>print((b-a)/2);<br>print(a+(b-a)/2);</pre>\n<pre>Output:<br>-1294967296<br>-647483648<br>-1000000000<br>-500000000<br>1500000000</pre>\n<p><strong>Conclusion:<br></strong>We should always use <strong>a+(b-a)/2</strong> instead of\u00a0<strong>(a+b)/2.</strong></p>\n<p>If you like this article and found it interesting and knowledgeable, do hit the \ud83d\udc4f button and share it with your colleagues and\u00a0friends.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=92735907026b\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["algo","programming","integer","java","data-structures"]},{"title":"Decorator Design Pattern","pubDate":"2021-04-29 06:27:25","link":"https://hunnychawla28.medium.com/decorator-design-pattern-dddb1ac9e6e6?source=rss-4def4207e2a3------2","guid":"https://medium.com/p/dddb1ac9e6e6","author":"Hunny Chawla","thumbnail":"","description":"\n<p>Hey, I\u2019m back with a new design\u00a0pattern.</p>\n<h3>It is used when\u00a0you:</h3>\n<ol>\n<li>Need to add additional functionality/responsibility to an object dynamically.</li>\n<li>Need to remove functionality/responsibility from an\u00a0object.</li>\n<li>Want to avoid too many sub-classes for adding additional functionality/responsibility.</li>\n</ol>\n<p>Let\u2019s take an example of everyone\u2019s favorite Pizza shop. Suppose we want to create a pizza ordering application using which we can order different types of pizza like onion, sweet corn, and capsicum. We want to calculate the cost of each type of Pizza for\u00a0now.</p>\n<p>So we can proceed like this. For Pizza, we can either go with the interface or abstract\u00a0class.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/924/1*z4xuUItufAsCsdSoAfwuIw.png\"><figcaption>Pizza.java</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/942/1*UZZ72V7kZYcM_q36KGPU2w.png\"><figcaption>OnionPizza.java</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1008/1*6J_QtaLQ0nWC3dGw049Agw.png\"><figcaption>SweetCornPizza.java</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/992/1*AZBpIk3iu0Jvt8E71RlfhQ.png\"><figcaption>CapsicumPizza.java</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*SolEg2gCt6Wwgg0EdDVuOQ.png\"><figcaption>PizzaShop.java</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/688/1*0dWkNLW3ch6maioz-JpYwQ.png\"><figcaption>Output</figcaption></figure><p>Now customers are asking for extra cheese and sauce with Pizza. Now we need to incorporate these changes as\u00a0well.</p>\n<p>Now one way of achieving the same is to create a concrete class for each type of pizza and every class will be implementing the cost\u00a0method.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_djkvlMLsA-8_YTFUO6how.png\"></figure><p>It looks like a class explosion. Isn\u2019t\u00a0it?</p>\n<p>One more way to implement the same. Like we can have some boolean variable in the Pizza class itself, that will define if the customer wants extra cheese/sauce or not. Code for the same will look like\u00a0this.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/906/1*_SUjyIjQtekE4_CuVe2YZQ.png\"></figure><p>Now getCost() method is not abstract, although every subclass can implement it and will use this method to calculate the final cost of the\u00a0Pizza.</p>\n<p>Now, what if the customer wants 2 or 3 units of extra sauce. And also, we have broken the open-closed principle. Suppose in the future we want to add another condiment, then we need to modify the Pizza class\u00a0itself.</p>\n<blockquote>\n<strong>Open-Closed Principle:</strong> Classes should be open for extension, but closed for modification.</blockquote>\n<p>Now, It is the right time to introduce the <strong>decorator pattern</strong>.</p>\n<blockquote>\n<strong><em>Definition</em></strong>: The Decorator Pattern attaches additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality.</blockquote>\n<p>Now we will not be modifying our current classes(Pizza, OnionPizza, SweetCornPizza, CapsicumPizza) that we have taken in the beginning. Let\u2019s see how we can add all these condiments.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_1_9fpwpIOwq_P5zVLoUoA.png\"><figcaption>CondimentDecorator.java</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*5EfnQ8qgkkrUsNTZmxaXUw.png\"><figcaption>Cheese.java</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ym0MrW6ORf-h4A_NcAV9kQ.png\"><figcaption>Sauce.java</figcaption></figure><p>So these two condiments classes we added, that\u2019s\u00a0it.</p>\n<p>Let\u2019s see the driver class\u00a0now.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*SC-NebIgSLJFRo7TWz6wZA.png\"></figure><p>So, look like we decorate our pizza with sauce and cheese. Isn\u2019t quite interesting?</p>\n<p>Here is the\u00a0output:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/890/1*Da66RoO4JKVVpnm_nyhOMQ.png\"></figure><blockquote>\n<strong>Reference:</strong> Head First design\u00a0pattern</blockquote>\n<blockquote>\n<strong>If you like this article, you can click on the clap button to appreciate me and share it with your friends, if you didn\u2019t like this, unfortunately, we don\u2019t have a dislike button here. If you have any thoughts to share, you can share in the comment section or you can inbox me at </strong><a href=\"mailto:hunnychawla528@gmail.com\"><strong>hunnychawla528@gmail.com</strong></a><strong>.</strong>\n</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=dddb1ac9e6e6\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>Hey, I\u2019m back with a new design\u00a0pattern.</p>\n<h3>It is used when\u00a0you:</h3>\n<ol>\n<li>Need to add additional functionality/responsibility to an object dynamically.</li>\n<li>Need to remove functionality/responsibility from an\u00a0object.</li>\n<li>Want to avoid too many sub-classes for adding additional functionality/responsibility.</li>\n</ol>\n<p>Let\u2019s take an example of everyone\u2019s favorite Pizza shop. Suppose we want to create a pizza ordering application using which we can order different types of pizza like onion, sweet corn, and capsicum. We want to calculate the cost of each type of Pizza for\u00a0now.</p>\n<p>So we can proceed like this. For Pizza, we can either go with the interface or abstract\u00a0class.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/924/1*z4xuUItufAsCsdSoAfwuIw.png\"><figcaption>Pizza.java</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/942/1*UZZ72V7kZYcM_q36KGPU2w.png\"><figcaption>OnionPizza.java</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1008/1*6J_QtaLQ0nWC3dGw049Agw.png\"><figcaption>SweetCornPizza.java</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/992/1*AZBpIk3iu0Jvt8E71RlfhQ.png\"><figcaption>CapsicumPizza.java</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*SolEg2gCt6Wwgg0EdDVuOQ.png\"><figcaption>PizzaShop.java</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/688/1*0dWkNLW3ch6maioz-JpYwQ.png\"><figcaption>Output</figcaption></figure><p>Now customers are asking for extra cheese and sauce with Pizza. Now we need to incorporate these changes as\u00a0well.</p>\n<p>Now one way of achieving the same is to create a concrete class for each type of pizza and every class will be implementing the cost\u00a0method.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_djkvlMLsA-8_YTFUO6how.png\"></figure><p>It looks like a class explosion. Isn\u2019t\u00a0it?</p>\n<p>One more way to implement the same. Like we can have some boolean variable in the Pizza class itself, that will define if the customer wants extra cheese/sauce or not. Code for the same will look like\u00a0this.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/906/1*_SUjyIjQtekE4_CuVe2YZQ.png\"></figure><p>Now getCost() method is not abstract, although every subclass can implement it and will use this method to calculate the final cost of the\u00a0Pizza.</p>\n<p>Now, what if the customer wants 2 or 3 units of extra sauce. And also, we have broken the open-closed principle. Suppose in the future we want to add another condiment, then we need to modify the Pizza class\u00a0itself.</p>\n<blockquote>\n<strong>Open-Closed Principle:</strong> Classes should be open for extension, but closed for modification.</blockquote>\n<p>Now, It is the right time to introduce the <strong>decorator pattern</strong>.</p>\n<blockquote>\n<strong><em>Definition</em></strong>: The Decorator Pattern attaches additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality.</blockquote>\n<p>Now we will not be modifying our current classes(Pizza, OnionPizza, SweetCornPizza, CapsicumPizza) that we have taken in the beginning. Let\u2019s see how we can add all these condiments.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_1_9fpwpIOwq_P5zVLoUoA.png\"><figcaption>CondimentDecorator.java</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*5EfnQ8qgkkrUsNTZmxaXUw.png\"><figcaption>Cheese.java</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ym0MrW6ORf-h4A_NcAV9kQ.png\"><figcaption>Sauce.java</figcaption></figure><p>So these two condiments classes we added, that\u2019s\u00a0it.</p>\n<p>Let\u2019s see the driver class\u00a0now.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*SC-NebIgSLJFRo7TWz6wZA.png\"></figure><p>So, look like we decorate our pizza with sauce and cheese. Isn\u2019t quite interesting?</p>\n<p>Here is the\u00a0output:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/890/1*Da66RoO4JKVVpnm_nyhOMQ.png\"></figure><blockquote>\n<strong>Reference:</strong> Head First design\u00a0pattern</blockquote>\n<blockquote>\n<strong>If you like this article, you can click on the clap button to appreciate me and share it with your friends, if you didn\u2019t like this, unfortunately, we don\u2019t have a dislike button here. If you have any thoughts to share, you can share in the comment section or you can inbox me at </strong><a href=\"mailto:hunnychawla528@gmail.com\"><strong>hunnychawla528@gmail.com</strong></a><strong>.</strong>\n</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=dddb1ac9e6e6\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["decorator-design-pattern","design-patterns","decorator-pattern"]},{"title":"Observer Pattern","pubDate":"2021-04-12 10:18:04","link":"https://hunnychawla28.medium.com/observer-pattern-218455e0f1aa?source=rss-4def4207e2a3------2","guid":"https://medium.com/p/218455e0f1aa","author":"Hunny Chawla","thumbnail":"","description":"\n<p>It is the most popular design pattern. It comes under the behavioral pattern category.</p>\n<h3>Publishers + Subscribers = Observer\u00a0Pattern</h3>\n<ol>\n<li>Publisher: Who publishes something.</li>\n<li>Subscriber: Who subscribes to a publisher.</li>\n</ol>\n<p>Let us understand by taking a real-life example of YouTube. Today everyone uses YouTube. So, I think it will be the best example to\u00a0explain.</p>\n<p>In YouTube, if any YouTuber uploads a video, then all subscribers of that YouTuber will get an instant notification. So here Youtuber is Publisher and Subscriber is of course subscriber.</p>\n<p>Let\u2019s see the implementations:</p>\n<p>We will be having two Interface Channel and Observer.</p>\n<a href=\"https://medium.com/media/53be60474349c0bc4f82c7adb11a1abe/href\">https://medium.com/media/53be60474349c0bc4f82c7adb11a1abe/href</a><a href=\"https://medium.com/media/6fef69fa18c9c5d3b478891245b23898/href\">https://medium.com/media/6fef69fa18c9c5d3b478891245b23898/href</a><p>Then we will be having a YouTuber class that will implement Channel Interface.</p>\n<a href=\"https://medium.com/media/1a849003a05cc6f3e2035338682ad23c/href\">https://medium.com/media/1a849003a05cc6f3e2035338682ad23c/href</a><p>As you can see that we are having one more method <strong>uploadVideo</strong> in the YouTuber class, Whenever a YouTuber will upload a video, we need to notify every subscriber. So as you can see in line 33 we have called <strong>notifySubscribers</strong> method.</p>\n<p>Here is my Subscriber class that implements Observer. In the Subscriber class, we are having two more methods to subscribe and unsubscribe to a\u00a0channel.</p>\n<a href=\"https://medium.com/media/022a78dd9d61085fa3c382de6c852f7a/href\">https://medium.com/media/022a78dd9d61085fa3c382de6c852f7a/href</a><p>Now, it's time to add driver class names as\u00a0YouTube.</p>\n<a href=\"https://medium.com/media/17e30b1446d305b1b5403d2dee569e1b/href\">https://medium.com/media/17e30b1446d305b1b5403d2dee569e1b/href</a><p>So, we will be creating a YouTuber class object and create the object of every subscriber. As you can see in line 7, hunny is subscribing to YouTuber. Hence only hunny will get notified when a video will get uploads in line 8. And similarly, when line 11 will get executed, every subscriber will get the notification as you can see in the output\u00a0below.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/570/1*bDjHkwSVWYqThVw_agKJCA.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*iIp5uX5kNKw_bWY2s-0apQ.png\"><figcaption>Observer Pattern</figcaption></figure><p>Although we have broken some solid principles here, my intent was just to explain the Observer\u00a0pattern.</p>\n<p>If you are able to identify those broken principles, don\u2019t forget to share them in the comment\u00a0section.</p>\n<blockquote>If you like this article, you can click on the clap button to appreciate me and share it with your friends, if you didn\u2019t like this, unfortunately, we don\u2019t have a dislike button here. If you have any thoughts to share, you can share in the comment section or you can inbox me at <a href=\"mailto:hunnychawla528@gmail.com\">hunnychawla528@gmail.com</a>.</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=218455e0f1aa\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>It is the most popular design pattern. It comes under the behavioral pattern category.</p>\n<h3>Publishers + Subscribers = Observer\u00a0Pattern</h3>\n<ol>\n<li>Publisher: Who publishes something.</li>\n<li>Subscriber: Who subscribes to a publisher.</li>\n</ol>\n<p>Let us understand by taking a real-life example of YouTube. Today everyone uses YouTube. So, I think it will be the best example to\u00a0explain.</p>\n<p>In YouTube, if any YouTuber uploads a video, then all subscribers of that YouTuber will get an instant notification. So here Youtuber is Publisher and Subscriber is of course subscriber.</p>\n<p>Let\u2019s see the implementations:</p>\n<p>We will be having two Interface Channel and Observer.</p>\n<a href=\"https://medium.com/media/53be60474349c0bc4f82c7adb11a1abe/href\">https://medium.com/media/53be60474349c0bc4f82c7adb11a1abe/href</a><a href=\"https://medium.com/media/6fef69fa18c9c5d3b478891245b23898/href\">https://medium.com/media/6fef69fa18c9c5d3b478891245b23898/href</a><p>Then we will be having a YouTuber class that will implement Channel Interface.</p>\n<a href=\"https://medium.com/media/1a849003a05cc6f3e2035338682ad23c/href\">https://medium.com/media/1a849003a05cc6f3e2035338682ad23c/href</a><p>As you can see that we are having one more method <strong>uploadVideo</strong> in the YouTuber class, Whenever a YouTuber will upload a video, we need to notify every subscriber. So as you can see in line 33 we have called <strong>notifySubscribers</strong> method.</p>\n<p>Here is my Subscriber class that implements Observer. In the Subscriber class, we are having two more methods to subscribe and unsubscribe to a\u00a0channel.</p>\n<a href=\"https://medium.com/media/022a78dd9d61085fa3c382de6c852f7a/href\">https://medium.com/media/022a78dd9d61085fa3c382de6c852f7a/href</a><p>Now, it's time to add driver class names as\u00a0YouTube.</p>\n<a href=\"https://medium.com/media/17e30b1446d305b1b5403d2dee569e1b/href\">https://medium.com/media/17e30b1446d305b1b5403d2dee569e1b/href</a><p>So, we will be creating a YouTuber class object and create the object of every subscriber. As you can see in line 7, hunny is subscribing to YouTuber. Hence only hunny will get notified when a video will get uploads in line 8. And similarly, when line 11 will get executed, every subscriber will get the notification as you can see in the output\u00a0below.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/570/1*bDjHkwSVWYqThVw_agKJCA.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*iIp5uX5kNKw_bWY2s-0apQ.png\"><figcaption>Observer Pattern</figcaption></figure><p>Although we have broken some solid principles here, my intent was just to explain the Observer\u00a0pattern.</p>\n<p>If you are able to identify those broken principles, don\u2019t forget to share them in the comment\u00a0section.</p>\n<blockquote>If you like this article, you can click on the clap button to appreciate me and share it with your friends, if you didn\u2019t like this, unfortunately, we don\u2019t have a dislike button here. If you have any thoughts to share, you can share in the comment section or you can inbox me at <a href=\"mailto:hunnychawla528@gmail.com\">hunnychawla528@gmail.com</a>.</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=218455e0f1aa\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["observer-design-pattern","observer","notification-service","observer-pattern","design-patterns"]},{"title":"Builder Design Pattern","pubDate":"2021-04-02 11:30:49","link":"https://hunnychawla28.medium.com/builder-design-pattern-8f35c388b0cf?source=rss-4def4207e2a3------2","guid":"https://medium.com/p/8f35c388b0cf","author":"Hunny Chawla","thumbnail":"","description":"\n<p>Do you know how easy it\u00a0is?</p>\n<p>This design pattern is a part of the <strong>creational design\u00a0pattern</strong>.</p>\n<blockquote>Let us discuss first why to use\u00a0it?</blockquote>\n<p><strong>Problem: </strong>You might have face the following issues while passing too many parameters in a method or constructor.</p>\n<ol>\n<li>There could be a change in the order of parameters passed in the constructor.</li>\n<li>You have to pass all the parameters, doesn't matter whether you want it or\u00a0not.</li>\n</ol>\n<p>Now let\u2019s discuss how to solve these given problems. There are two solutions to solve the above problems.</p>\n<ol>\n<li>Using Setters\u00a0methods.</li>\n<li>Using Builder\u00a0design.</li>\n</ol>\n<p>Let\u2019s take an example and try to understand. So here we are having a Student class with 5 properties rollNo, name, class, age, mobileNo.</p>\n<a href=\"https://medium.com/media/88f9f4989240d35870aba9ab60672ede/href\">https://medium.com/media/88f9f4989240d35870aba9ab60672ede/href</a><p>Here, we are creating student objects using the constructor and setters\u00a0method.</p>\n<a href=\"https://medium.com/media/1fa2c551d3649d3c427bc2b638b6845a/href\">https://medium.com/media/1fa2c551d3649d3c427bc2b638b6845a/href</a><p>Now, it\u2019s time to see the Builder implementation.</p>\n<blockquote>Nothing big you need to do, just need to add a <strong>return this</strong> statement in all setters method and all\u00a0done.</blockquote>\n<a href=\"https://medium.com/media/d671ea0f79ef87b10c383eb1a9a1f8c8/href\">https://medium.com/media/d671ea0f79ef87b10c383eb1a9a1f8c8/href</a><a href=\"https://medium.com/media/bdb73b777d832bfb7290b3fbae51e0d9/href\">https://medium.com/media/bdb73b777d832bfb7290b3fbae51e0d9/href</a><p>Hey, you noticed the difference, all this done in one line and we don\u2019t need to worry about the order of parameters and we can set any number of parameters as many we want. Hence above mention, two problems are solved. Even it can be solved using the setters method also, but don\u2019t you think we were writing too much line of code to create\u00a0student.</p>\n<p>Let me know in the comment section if you have any question or suggestions.</p>\n<p>If you like this article and you learned something from this don\u2019t forget to hit the clap button and share it with your friends\u00a0also.</p>\n<blockquote>Happy learning!!</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=8f35c388b0cf\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>Do you know how easy it\u00a0is?</p>\n<p>This design pattern is a part of the <strong>creational design\u00a0pattern</strong>.</p>\n<blockquote>Let us discuss first why to use\u00a0it?</blockquote>\n<p><strong>Problem: </strong>You might have face the following issues while passing too many parameters in a method or constructor.</p>\n<ol>\n<li>There could be a change in the order of parameters passed in the constructor.</li>\n<li>You have to pass all the parameters, doesn't matter whether you want it or\u00a0not.</li>\n</ol>\n<p>Now let\u2019s discuss how to solve these given problems. There are two solutions to solve the above problems.</p>\n<ol>\n<li>Using Setters\u00a0methods.</li>\n<li>Using Builder\u00a0design.</li>\n</ol>\n<p>Let\u2019s take an example and try to understand. So here we are having a Student class with 5 properties rollNo, name, class, age, mobileNo.</p>\n<a href=\"https://medium.com/media/88f9f4989240d35870aba9ab60672ede/href\">https://medium.com/media/88f9f4989240d35870aba9ab60672ede/href</a><p>Here, we are creating student objects using the constructor and setters\u00a0method.</p>\n<a href=\"https://medium.com/media/1fa2c551d3649d3c427bc2b638b6845a/href\">https://medium.com/media/1fa2c551d3649d3c427bc2b638b6845a/href</a><p>Now, it\u2019s time to see the Builder implementation.</p>\n<blockquote>Nothing big you need to do, just need to add a <strong>return this</strong> statement in all setters method and all\u00a0done.</blockquote>\n<a href=\"https://medium.com/media/d671ea0f79ef87b10c383eb1a9a1f8c8/href\">https://medium.com/media/d671ea0f79ef87b10c383eb1a9a1f8c8/href</a><a href=\"https://medium.com/media/bdb73b777d832bfb7290b3fbae51e0d9/href\">https://medium.com/media/bdb73b777d832bfb7290b3fbae51e0d9/href</a><p>Hey, you noticed the difference, all this done in one line and we don\u2019t need to worry about the order of parameters and we can set any number of parameters as many we want. Hence above mention, two problems are solved. Even it can be solved using the setters method also, but don\u2019t you think we were writing too much line of code to create\u00a0student.</p>\n<p>Let me know in the comment section if you have any question or suggestions.</p>\n<p>If you like this article and you learned something from this don\u2019t forget to hit the clap button and share it with your friends\u00a0also.</p>\n<blockquote>Happy learning!!</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=8f35c388b0cf\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["patterns","builder-pattern","design-patterns","java"]},{"title":"Print 1 to 100 without using any number in your code","pubDate":"2021-03-14 08:18:21","link":"https://hunnychawla28.medium.com/print-1-to-100-without-using-any-number-in-your-code-84f75f116087?source=rss-4def4207e2a3------2","guid":"https://medium.com/p/84f75f116087","author":"Hunny Chawla","thumbnail":"","description":"\n<p>In this article, I\u2019m going to explain how to print numbers without using any number in your code using\u00a0java.</p>\n<p><strong>Hack 1</strong>: Use ASCII\u00a0values</p>\n<p><strong>Hack 2</strong>: Use String\u00a0length</p>\n<a href=\"https://medium.com/media/4eb577e991681272f4dc69dffa9732c9/href\">https://medium.com/media/4eb577e991681272f4dc69dffa9732c9/href</a><blockquote>Thank you for reading this\u00a0article.</blockquote>\n<blockquote>If you like this article, appreciate me by clicking on the clap button. If you have any feedback or suggestions, don\u2019t forget to write in the comment\u00a0section.</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=84f75f116087\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>In this article, I\u2019m going to explain how to print numbers without using any number in your code using\u00a0java.</p>\n<p><strong>Hack 1</strong>: Use ASCII\u00a0values</p>\n<p><strong>Hack 2</strong>: Use String\u00a0length</p>\n<a href=\"https://medium.com/media/4eb577e991681272f4dc69dffa9732c9/href\">https://medium.com/media/4eb577e991681272f4dc69dffa9732c9/href</a><blockquote>Thank you for reading this\u00a0article.</blockquote>\n<blockquote>If you like this article, appreciate me by clicking on the clap button. If you have any feedback or suggestions, don\u2019t forget to write in the comment\u00a0section.</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=84f75f116087\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["java","interview-questions","interview","java8"]},{"title":"Quality Assurance","pubDate":"2021-03-12 12:38:35","link":"https://hunnychawla28.medium.com/quality-assurance-e64a4e8f8792?source=rss-4def4207e2a3------2","guid":"https://medium.com/p/e64a4e8f8792","author":"Hunny Chawla","thumbnail":"","description":"\n<p>In the Software industry quality assurance is a very important term we use. And it must be important as development is. But in some of the middle-level industries, we ignore this thing. We just think about development only. But quality assurance is important as development is.</p>\n<p>Quality assurance can strengthen your brand value. By ignoring it, any industry may end up losing brand\u00a0value.</p>\n<p>As a developer, I would like to share an experience. At the time of development, sometimes we write bad quality code, keeping in mind that let us complete it first and after that, we will refactor it because the sprint deadline is near. But that time never comes again and we have to live with that code only and hence compromising quality.</p>\n<p>In today\u2019s world quality is very important. People spend more on quality. Not even in the software industry but in every industry, quality is a very important factor and it is directly connected with brand\u00a0value.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/704/1*ms0gsSWpAnqIxa3FgmWpBw.jpeg\"></figure><blockquote>Quality matters a\u00a0lot.</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e64a4e8f8792\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>In the Software industry quality assurance is a very important term we use. And it must be important as development is. But in some of the middle-level industries, we ignore this thing. We just think about development only. But quality assurance is important as development is.</p>\n<p>Quality assurance can strengthen your brand value. By ignoring it, any industry may end up losing brand\u00a0value.</p>\n<p>As a developer, I would like to share an experience. At the time of development, sometimes we write bad quality code, keeping in mind that let us complete it first and after that, we will refactor it because the sprint deadline is near. But that time never comes again and we have to live with that code only and hence compromising quality.</p>\n<p>In today\u2019s world quality is very important. People spend more on quality. Not even in the software industry but in every industry, quality is a very important factor and it is directly connected with brand\u00a0value.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/704/1*ms0gsSWpAnqIxa3FgmWpBw.jpeg\"></figure><blockquote>Quality matters a\u00a0lot.</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e64a4e8f8792\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["quality-software","quality","quality-control","quality-assurance"]}]}